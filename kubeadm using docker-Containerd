# Execute on Both "Master" & "Worker Node"

# disable swap
sudo swapoff -a
# This command to modifies a configuration file to keep the swap remains off even after a system reboot.
sudo sed -i '/ swap / s/^/#/' /etc/fstab

# To configure the IPV4 bridge on all nodes, execute the following commands on each node...............
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

# Install kubelet, kubeadm, and kubectl on each node.............
sudo apt-get update -y
    # Next, we have to ensure that we can download and install packages from the internet securely.
      sudo apt-get install -y apt-transport-https ca-certificates curl gpg
    # Next, we have to create a directory where we'll store a special key that verifies the authenticity of Kubernetes packages
      sudo mkdir -p -m 755 /etc/apt/keyrings
    # Letâ€™s fetch the public key from Google and store it in the folder we created in the previous step. This key is important to verify that the Kubernetes packages we download are genuine and haven't been tampered with.
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    # Next, we need to tell the apt package manager where to find Kubernetes packages for downloading.
     echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# Install containerd..................
sudo apt-get install containerd -y
  # Next, configure containerd on all nodes to ensure its compatibility with Kubernetes. First, create a folder for the configuration file with the command
    sudo mkdir /etc/containerd
  # Then, create a default configuration file for containerd and save it as config.toml
    sudo sh -c "containerd config default > /etc/containerd/config.toml"
  #  you need to modify the config.toml file to locate the entry that sets "SystemdCgroup" to false and changes its value to true. This is important because Kubernetes requires all its components, and the container runtime uses
     sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
  # Next, restart containerd and kubelet services to apply the changes you made on all nodes.
sudo systemctl restart containerd.service
sudo systemctl restart kubelet.service
sudo systemctl enable --now kubelet




#  Execute on Master Node............................
sudo kubeadm config images pull
sudo kubeadm init 

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Network Plugin = calico
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.1/manifests/calico.yaml

kubeadm token create --print-join-command


# Execute on ALL of your Worker Node's...................................
sudo kubeadm reset pre-flight checks
sudo your-token --v=5
